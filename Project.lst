Microsoft (R) Macro Assembler Version 14.00.24210.0	    05/15/17 22:47:32
HolaMundo.asm						     Page 1 - 1



				;Código programado por Ismael Restrepo Y Juan Fernando Misas

				;Este programa soluciona ecuaciones matriciales con la descomposicion LU


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				.386					;No se que tiene de diferente usar el 686; asi que mejor hagamosle a este, por si acaso
				.MODEL FLAT, STDCALL
HolaMundo.asm(9) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 


				;----------------------------------------------------------------------------------------------------
				;Aqui se declaran bytes de impresion para mostrar mensajes al usuario
				;----------------------------------------------------------------------------------------------------

 00000000			.data

					;Los "strings" necesarios para darle la bienvenida al usuario
 00000000 42 69 65 6E 76		bienvenida		BYTE	"Bienvenido al único codigo que soluciona ecuaciones matriciales con la descomposicion LU que existe ", 0
	   65 6E 69 64 6F
	   20 61 6C 20 FA
	   6E 69 63 6F 20
	   63 6F 64 69 67
	   6F 20 71 75 65
	   20 73 6F 6C 75
	   63 69 6F 6E 61
	   20 65 63 75 61
	   63 69 6F 6E 65
	   73 20 6D 61 74
	   72 69 63 69 61
	   6C 65 73 20 63
	   6F 6E 20 6C 61
	   20 64 65 73 63
	   6F 6D 70 6F 73
	   69 63 69 6F 6E
	   20 4C 55 20 71
	   75 65 20 65 78
	   69 73 74 65 20
	   00
 00000065 45 73 74 65 20		asignatura		BYTE	"Este programa ha sido realizado para el curso de Arquitectura de computadores, primer semestre del 2017", 0
	   70 72 6F 67 72
	   61 6D 61 20 68
	   61 20 73 69 64
	   6F 20 72 65 61
	   6C 69 7A 61 64
	   6F 20 70 61 72
	   61 20 65 6C 20
	   63 75 72 73 6F
	   20 64 65 20 41
	   72 71 75 69 74
	   65 63 74 75 72
	   61 20 64 65 20
	   63 6F 6D 70 75
	   74 61 64 6F 72
	   65 73 2C 20 70
	   72 69 6D 65 72
	   20 73 65 6D 65
	   73 74 72 65 20
	   64 65 6C 20 32
	   30 31 37 00
 000000CD 50 72 6F 67 72		identificacion	BYTE	"Programado por Ismael Restrepo y Juan Fernando Misas,", 0
	   61 6D 61 64 6F
	   20 70 6F 72 20
	   49 73 6D 61 65
	   6C 20 52 65 73
	   74 72 65 70 6F
	   20 79 20 4A 75
	   61 6E 20 46 65
	   72 6E 61 6E 64
	   6F 20 4D 69 73
	   61 73 2C 00
 00000103 69 64 65 6E 74		CC				BYTE	"identificados con CC 1152712444 y ######## respectivamente", 0
	   69 66 69 63 61
	   64 6F 73 20 63
	   6F 6E 20 43 43
	   20 31 31 35 32
	   37 31 32 34 34
	   34 20 79 20 23
	   23 23 23 23 23
	   23 23 20 72 65
	   73 70 65 63 74
	   69 76 61 6D 65
	   6E 74 65 00
					

 0000013E 49 6E 67 72 65		query			BYTE	"Ingrese el tamano de la matriz", 0
	   73 65 20 65 6C
	   20 74 61 6D 61
	   6E 6F 20 64 65
	   20 6C 61 20 6D
	   61 74 72 69 7A
	   00
 0000015D 49 6E 67 72 65		nfilas			BYTE	"Ingrese el numero de filas",0
	   73 65 20 65 6C
	   20 6E 75 6D 65
	   72 6F 20 64 65
	   20 66 69 6C 61
	   73 00
 00000178 49 6E 67 72 65		ncolumnas		BYTE	"Ingrese el numero de columnas",0
	   73 65 20 65 6C
	   20 6E 75 6D 65
	   72 6F 20 64 65
	   20 63 6F 6C 75
	   6D 6E 61 73 00
 00000196 54 61 6D 61 6E		efilas			BYTE	"Tamano invalido para las filas el tamano maximo es 10",0
	   6F 20 69 6E 76
	   61 6C 69 64 6F
	   20 70 61 72 61
	   20 6C 61 73 20
	   66 69 6C 61 73
	   20 65 6C 20 74
	   61 6D 61 6E 6F
	   20 6D 61 78 69
	   6D 6F 20 65 73
	   20 31 30 00
 000001CC 54 61 6D 61 6E		ecolumnas		BYTE	"Tamano invalido para las columnas el tamano maximo es 10",0
	   6F 20 69 6E 76
	   61 6C 69 64 6F
	   20 70 61 72 61
	   20 6C 61 73 20
	   63 6F 6C 75 6D
	   6E 61 73 20 65
	   6C 20 74 61 6D
	   61 6E 6F 20 6D
	   61 78 69 6D 6F
	   20 65 73 20 31
	   30 00
 00000205 45 6C 20 6D 65	eMatrizNoCuadrada	BYTE	"El metodo de Jacobi solo se aplica para matrices cuadradas", 0
	   74 6F 64 6F 20
	   64 65 20 4A 61
	   63 6F 62 69 20
	   73 6F 6C 6F 20
	   73 65 20 61 70
	   6C 69 63 61 20
	   70 61 72 61 20
	   6D 61 74 72 69
	   63 65 73 20 63
	   75 61 64 72 61
	   64 61 73 00
 00000240 49 6E 74 65 6E		otravez			BYTE	"Intente otra vez",0
	   74 65 20 6F 74
	   72 61 20 76 65
	   7A 00
 00000251 49 6E 67 72 65	    eNumeroInvalido BYTE	"Ingrese un numero entre 2 y 10", 0
	   73 65 20 75 6E
	   20 6E 75 6D 65
	   72 6F 20 65 6E
	   74 72 65 20 32
	   20 79 20 31 30
	   00
 00000270 63 61 70 74 75		capturado		BYTE	"capturado",0
	   72 61 64 6F 00
 0000027A 73 65 20 68 69		popd			BYTE	"se hizo pop",0
	   7A 6F 20 70 6F
	   70 00
 00000286 2C 00				coma			BYTE	",",0
 00000288 49 6E 67 72 65		posicion		BYTE	"Ingrese el numero en la posicion ",0
	   73 65 20 65 6C
	   20 6E 75 6D 65
	   72 6F 20 65 6E
	   20 6C 61 20 70
	   6F 73 69 63 69
	   6F 6E 20 00
 000002AA 4C 61 20 6D 61		EsSimetrica		BYTE	"La matriz ingresada es simetrica", 0
	   74 72 69 7A 20
	   69 6E 67 72 65
	   73 61 64 61 20
	   65 73 20 73 69
	   6D 65 74 72 69
	   63 61 00
 000002CB 4C 61 20 6D 61		NoEsSimetrica	BYTE	"La matriz ingresada no es simetrica", 0
	   74 72 69 7A 20
	   69 6E 67 72 65
	   73 61 64 61 20
	   6E 6F 20 65 73
	   20 73 69 6D 65
	   74 72 69 63 61
	   00
 000002EF 45 6C 20 6E 75		transpuesto		BYTE	"El numero transpuesto es ", 0
	   6D 65 72 6F 20
	   74 72 61 6E 73
	   70 75 65 73 74
	   6F 20 65 73 20
	   00
 00000309 4C 6F 20 71 75		posicionMat		BYTE	"Lo que esta en esi en la matriz", 0
	   65 20 65 73 74
	   61 20 65 6E 20
	   65 73 69 20 65
	   6E 20 6C 61 20
	   6D 61 74 72 69
	   7A 00
 00000329 4C 6F 20 71 75		posicionTrans	BYTE	"Lo que esta en esi en la transpuesta", 0
	   65 20 65 73 74
	   61 20 65 6E 20
	   65 73 69 20 65
	   6E 20 6C 61 20
	   74 72 61 6E 73
	   70 75 65 73 74
	   61 00
 0000034E 45 6C 20 6D 61		NumeroMayor		BYTE	"El mayor numero de la matriz es ", 0
	   79 6F 72 20 6E
	   75 6D 65 72 6F
	   20 64 65 20 6C
	   61 20 6D 61 74
	   72 69 7A 20 65
	   73 20 00


				;----------------------------------------------------------------------------------------------------
				;Aquí solo variables
				;----------------------------------------------------------------------------------------------------
 0000036F 00				coordena	BYTE ?
 00000370 00000000			x			DWORD 0			;Estas dos antes eran Bytes
 00000374 00000000			y			DWORD 0
 00000378 00				filas		BYTE ?
 00000379 00				columnas	BYTE ?
 0000037A 00000000			index		DWORD ?
 0000037E				numero		REAL10 ?
	   00000000000000000000
 00000388 00000000			aux			DWORD ?
 0000038C 00000000		numeroFila		DWORD ?
 00000390 00000000		numerosTotales	DWORD ?
 00000394				AuxReal		REAL10	?
	   00000000000000000000
 0000039E 00000000			AgregarEn	DWORD 0
 000003A2 00				AuxY		BYTE 0
 000003A3 00				AuxX		BYTE 0				;Para la tranpuesta
 000003A4 00000000			ContCiclos	DWORD 0				;Para contar cuantos numeros ha transpuesta
 000003A8 00				ContX		BYTE 0
 000003A9 00				ContY		BYTE 0				;Para ir cambiando la posición donde debe añadir 
 000003AA 00				BoolComp	BYTE 0				;Si es 0 cuanta como falso, y mas de 0 es verdadero


				;----------------------------------------------------------------------------------------------------
				;Empieza el main
				;----------------------------------------------------------------------------------------------------
 00000000			.code
 00000000			main PROC

				;-------------------------------------------
					;La bienvenida a nuestro programa

 00000000  BA 00000000 R		mov edx, OFFSET bienvenida
 00000005  E8 00000000 E		call writeString
 0000000A  E8 00000000 E		call crlf
 0000000F  BA 00000065 R		mov edx, OFFSET asignatura
 00000014  E8 00000000 E		call writeString
 00000019  E8 00000000 E		call crlf
 0000001E  BA 000000CD R		mov edx, OFFSET identificacion
 00000023  E8 00000000 E		call writeString
 00000028  E8 00000000 E		call crlf
 0000002D  BA 00000103 R		mov edx, OFFSET CC
 00000032  E8 00000000 E		call writeString
 00000037  E8 00000000 E		call crlf
					

				;-------------------------------------------   

					
					
 0000003C  BA 0000013E R		mov edx, OFFSET query					; Esto es para leer el "string" que pide las filas
 00000041				numeroMatriz:
 00000041  E8 00000000 E			call writeString
 00000046  E8 00000000 E			call crlf

 0000004B					numeroFilas:						;Con esto se le pide el numero de filas al usuario
 0000004B  BA 0000015D R				mov edx, OFFSET nfilas
 00000050  E8 00000000 E				call writeString
 00000055  E8 00000000 E				call crlf	
 0000005A  E8 00000000 E				call readInt
 0000005F  E8 00000000 E				call Clrscr
							
							.IF (al > 10)					;Si la entrada es mayor a 10 salta un error y se debe volver a intentar
 00000064  3C 0A	   *	    cmp    al, 00Ah
 00000066  76 09	   *	    jbe    @C0001
 00000068  E8 000007FC						call tamanoInvalidoFilas			;"Excepcion" creado por nosotros en la parte de abajo del documento, solo imprime texto
 0000006D  EB DC						jmp numeroFilas
							.ELSEIF (al < 2)				;Lo mismo si la entrada es menor a 2
 0000006F  EB 0B	   *	    jmp    @C0003
 00000071		   *@C0001:
 00000071  3C 02	   *	    cmp    al, 002h
 00000073  73 07	   *	    jae    @C0004
 00000075  E8 0000085B						call numeroInvalidoFilas			;Otra "excepcion" que no pide ningun dato y solo imprime el error que representa
 0000007A  EB CF						jmp numeroFilas
							.ENDIF
 0000007C		   *@C0004:
 0000007C		   *@C0003:

 0000007C  E8 00000000 E				call crlf	
 00000081  A2 00000378 R				mov filas,al

 00000086					numeroColumnas:						;Ahora se le piden las columnas al usuario de la misma forma que las filas
 00000086  BA 00000178 R				mov edx,offset ncolumnas
 0000008B  E8 00000000 E				call writeString
 00000090  E8 00000000 E				call crlf	
 00000095  E8 00000000 E				call readInt
 0000009A  E8 00000000 E				call Clrscr

							.IF (al > 10)					;Si la entrada es mayor a 10 salta un error llamado por el proc de abajo
 0000009F  3C 0A	   *	    cmp    al, 00Ah
 000000A1  76 09	   *	    jbe    @C0006
 000000A3  E8 000007C1						call tamanoInvalidoFilas
 000000A8  EB DC						jmp numeroColumnas
							.ELSEIF (al < 2)				;Si la entrada es menor a 2 salta el error por pantalla y se pide volver a ingresar las columnas
 000000AA  EB 0B	   *	    jmp    @C0008
 000000AC		   *@C0006:
 000000AC  3C 02	   *	    cmp    al, 002h
 000000AE  73 07	   *	    jae    @C0009
 000000B0  E8 00000820						call numeroInvalidoFilas
 000000B5  EB CF						jmp numeroColumnas
							.ENDIF
 000000B7		   *@C0009:
 000000B7		   *@C0008:

 000000B7  E8 00000000 E				call crlf	
 000000BC  A2 00000379 R				mov Columnas,al
						
 000000C1					cuadrada:

							.IF (al != filas)					;Si la la matriz no es cuadrada se pide que se vuelva a ingresar
 000000C1  3A 05 00000378 R *	    cmp    al, filas
 000000C7  74 0A	   *	    je	@C000B
 000000C9  E8 0000079B						call tamanoInvalidoFilas
 000000CE  E9 FFFFFF78						jmp numeroFilas
							.ENDIF
 000000D3		   *@C000B:

							;Para fijar el "tamaño" de la matriz segun l número de elementos en las filas
							.IF (al == 2)
 000000D3  3C 02	   *	    cmp    al, 002h
 000000D5  75 19	   *	    jne    @C000D
 000000D7  C7 05 0000038C R					mov numeroFila, 1
	   00000001
 000000E1  C7 05 00000390 R					mov numerosTotales, 4
	   00000004
							.ELSEIF (al == 3)
 000000EB  E9 000000D7	   *	    jmp    @C000F
 000000F0		   *@C000D:
 000000F0  3C 03	   *	    cmp    al, 003h
 000000F2  75 19	   *	    jne    @C0010
 000000F4  C7 05 0000038C R					mov numeroFila, 2
	   00000002
 000000FE  C7 05 00000390 R					mov numerosTotales ,  9
	   00000009
							.ELSEIF (al == 4)
 00000108  E9 000000BA	   *	    jmp    @C0012
 0000010D		   *@C0010:
 0000010D  3C 04	   *	    cmp    al, 004h
 0000010F  75 19	   *	    jne    @C0013
 00000111  C7 05 0000038C R					mov numeroFila, 3 
	   00000003
 0000011B  C7 05 00000390 R					mov numerosTotales ,  16
	   00000010
							.ELSEIF (al == 5)
 00000125  E9 0000009D	   *	    jmp    @C0015
 0000012A		   *@C0013:
 0000012A  3C 05	   *	    cmp    al, 005h
 0000012C  75 19	   *	    jne    @C0016
 0000012E  C7 05 0000038C R					mov numeroFila, 4
	   00000004
 00000138  C7 05 00000390 R					mov numerosTotales ,  25
	   00000019
							.ELSEIF (al == 6)
 00000142  E9 00000080	   *	    jmp    @C0018
 00000147		   *@C0016:
 00000147  3C 06	   *	    cmp    al, 006h
 00000149  75 16	   *	    jne    @C0019
 0000014B  C7 05 0000038C R					mov numeroFila, 5
	   00000005
 00000155  C7 05 00000390 R					mov numerosTotales ,  36
	   00000024
							.ELSEIF (al == 7)
 0000015F  EB 66	   *	    jmp    @C001B
 00000161		   *@C0019:
 00000161  3C 07	   *	    cmp    al, 007h
 00000163  75 16	   *	    jne    @C001C
 00000165  C7 05 0000038C R					mov numeroFila, 6
	   00000006
 0000016F  C7 05 00000390 R					mov numerosTotales ,  49
	   00000031
							.ELSEIF (al == 8)
 00000179  EB 4C	   *	    jmp    @C001E
 0000017B		   *@C001C:
 0000017B  3C 08	   *	    cmp    al, 008h
 0000017D  75 16	   *	    jne    @C001F
 0000017F  C7 05 0000038C R					mov numeroFila, 7
	   00000007
 00000189  C7 05 00000390 R					mov numerosTotales ,  64
	   00000040
							.ELSEIF (al == 9)
 00000193  EB 32	   *	    jmp    @C0021
 00000195		   *@C001F:
 00000195  3C 09	   *	    cmp    al, 009h
 00000197  75 16	   *	    jne    @C0022
 00000199  C7 05 0000038C R					mov numeroFila, 8
	   00000008
 000001A3  C7 05 00000390 R					mov numerosTotales ,  81
	   00000051
							.ELSEIF (al == 10)
 000001AD  EB 18	   *	    jmp    @C0024
 000001AF		   *@C0022:
 000001AF  3C 0A	   *	    cmp    al, 00Ah
 000001B1  75 14	   *	    jne    @C0025
 000001B3  C7 05 0000038C R					mov numeroFila, 9
	   00000009
 000001BD  C7 05 00000390 R					mov numerosTotales ,  100
	   00000064
							.ENDIF
 000001C7		   *@C0025:
 000001C7		   *@C0024:
 000001C7		   *@C0021:
 000001C7		   *@C001E:
 000001C7		   *@C001B:
 000001C7		   *@C0018:
 000001C7		   *@C0015:
 000001C7		   *@C0012:
 000001C7		   *@C000F:



 000003AB						.data
 000003AB  0000000A [					matriz REAL10 10 DUP(10 DUP(0.0))				;Crea la maxima matriz, 10 X 10
	    0000000A [
	     00000000000000000000
	    ]
	   ]
 00000793  0000000A [					transpuesta REAL10 10 DUP(10 DUP(0.0))				;Para guardar la transpuesta
	    0000000A [
	     00000000000000000000
	    ]
	   ]

 000001C7						.code
 000001C7  A1 00000390 R				mov eax, numerosTotales
 000001CC  BB 0000000A					mov ebx, 10
 000001D1  F7 E3					mul ebx
 000001D3  A3 00000390 R				mov numerosTotales, eax
 000001D8  BE 00000000					mov esi, 0
 000001DD  C7 05 00000370 R				mov x, 0
	   00000000
 000001E7  C7 05 00000374 R				mov y, 0
	   00000000

							;Operaciones con las matrices
 000001F1						IngresandoDatos:
 000001F1  8B 35 0000037A R					mov esi, index

								;Imprimiendo la posicion que el usuario debe ingresar en la matriz, un num racional
 000001F7  BA 00000288 R					mov edx, OFFSET posicion
 000001FC  E8 00000000 E					call writeString 
 00000201  E8 00000000 E					call crlf
 00000206  A1 00000370 R					mov eax, x
 0000020B  E8 00000000 E					call writeDec
 00000210  BA 00000286 R					mov edx, OFFSET coma
 00000215  E8 00000000 E					call writeString
 0000021A  A1 00000374 R					mov eax, y
 0000021F  E8 00000000 E					call writeDec
 00000224  E8 00000000 E					call crlf
 00000229  9B DB E3						finit

								;Anadiendo los valores a la matriz
 0000022C  E8 00000000 E					call readFloat

								;Para avanzar el indice de la matriz original
 00000231  A1 00000370 R					mov eax, x
 00000236  BB 00000064						mov ebx, 100
 0000023B  F7 E3						mul ebx
 0000023D  A3 00000388 R					mov aux, eax

 00000242  A1 00000374 R					mov eax, y
 00000247  BB 0000000A						mov ebx, 10
 0000024C  F7 E3						mul ebx

 0000024E  03 05 00000388 R					add eax, aux
 00000254  8B F0						mov esi, eax

 00000256  DB BE 000003AB R					fstp matriz[esi]					;Agregando el número agregado a la matriz
								
								;Para avanzar el indice de la matriz transpuesta
 0000025C  A1 00000374 R					mov eax, y
 00000261  BB 00000064						mov ebx, 100
 00000266  F7 E3						mul ebx
 00000268  A3 00000388 R					mov aux, eax

 0000026D  A1 00000370 R					mov eax, x
 00000272  BB 0000000A						mov ebx, 10
 00000277  F7 E3						mul ebx

 00000279  03 05 00000388 R					add eax, aux
 0000027F  8B F0						mov esi, eax

								
 00000281  DB BE 00000793 R					fstp transpuesta[esi]							;Agregando el número ingresado a la matriz transpuesta

 00000287  9B DB E3						finit


 0000028A  A1 00000374 R					mov eax, y
 0000028F  3B 05 0000038C R					cmp eax, numeroFila							;Comparando la x con el numero maximo que esta puede alzanzar para reiniciarla
 00000295  74 0D						je reinicioX2
 00000297  A1 00000374 R					mov eax, y
 0000029C  40							inc eax
 0000029D  A3 00000374 R					mov y, eax

 000002A2  EB 15						jmp aumentoESI2

 000002A4							reinicioX2:
									
 000002A4  B8 00000000							mov eax, 0
 000002A9  A3 00000374 R						mov y, eax			;Reiniciando y		
 000002AE  A1 00000370 R						mov eax, x
 000002B3  40								inc eax				;Incrementando x
 000002B4  A3 00000370 R						mov x, eax
 000002B9							aumentoESI2:
 000002B9  A1 0000037A R						mov eax, index
 000002BE  83 C0 0A							add eax, 10				;Aumentando el contador de veces que se ha guardado un numero
 000002C1  A3 0000037A R						mov index, eax
 000002C6  3B 05 00000390 R						cmp eax, numerosTotales					;Comparando cuantos numeros hay guardados ya en la matriz con los que debe entrar el usuario
 000002CC  74 05							je finPrograma
						
 000002CE  E9 FFFFFF1E						jmp IngresandoDatos


 000002D3						finPrograma:				;Para terminar de añadir los datos

							;---------------------------------------------------------------------------------------------------------------------------

							
							
 00000B7B						.data			;Datos que necesita este "metodo" de buscar el mayor numero
								
 00000B7B 00000000						mayorX DWORD ?
 00000B7F 00000000						mayorY DWORD ?
 00000B83 00000000						indiceMayor DWORD ?
 00000B87							comparar REAL10 0.0
	   00000000000000000000
 00000B91 00000000						numMatriz DWORD ?
 00000B95 00000000						numComp	  DWORD ?

 000002D3						.code

 000002D3  BE 00000000					mov esi,0
 000002D8  B8 00000000					mov eax,0
 000002DD  A3 00000370 R				mov x,eax
 000002E2  A3 00000374 R				mov y,eax

 000002E7						mayorAbsoluto:

 000002E7  A1 00000374 R					mov eax, y
 000002EC  8B 1D 00000370 R					mov ebx, x
 000002F2  3B C3						cmp eax, ebx
 000002F4  74 33						je SonIguales
							  
 000002F6  9B DB E3						  finit
 000002F9  DB AE 000003AB R					  fld matriz[esi]		;Guardar en el stack

 000002FF  D9 E1						  fabs					;Hacer a todos los numeros positivos para buscar el mayor
 00000301  DB 2D 00000B87 R					  fld comparar

 00000307  DE D9						  fcompp
							
 00000309  DF E0							fnstsw ax
 0000030B  9E								sahf
									
 0000030C  73 1B							jae seguir		;Aqui esta el error, porque siempre es true; ya intente con todos los metodos, comparaciones y mover los reales al ax


 0000030E								remplazar:			;Guardar la posicion e indice del mayor numero de la matriz
 0000030E  A1 00000370 R							mov eax, x
 00000313  A3 00000B7B R							mov mayorX, eax
 00000318  A1 00000374 R							mov eax, y
 0000031D  A3 00000B7F R							mov mayorY, eax
 00000322  8B C6								mov eax, esi

 00000324  A3 00000B83 R							mov indiceMayor, eax
										
 00000329						  SonIguales:

 00000329							seguir:
 00000329  8B C6							mov eax,esi
 0000032B  83 C0 0A							add eax,10
 0000032E  8B F0							mov esi, eax
 00000330  3D 000003E8							cmp eax, 1000
 00000335  7D 29							jge acabo			;Terminar el "metodo" de buscar el mayor cuando haya recorrido todo el arreglo

 00000337  A1 00000374 R						mov eax, y
 0000033C  40								inc eax
 0000033D  A3 00000374 R						mov y, eax
 00000342  83 F8 0A							cmp eax, 10
 00000345  7D 02							jge reiniciarY			;Reiniciar la coordenada Y cuando llegue a su mayor expresion permitida

 00000347  EB 9E							jmp mayorAbsoluto		;Reiniciar el ciclo de buscar el mayor
										

 00000349									reiniciarY:
 00000349  B8 00000000									mov eax,0
 0000034E  A3 00000374 R								mov y,eax		;Reiniciar Y a cero
 00000353  A1 00000370 R								mov eax, x
 00000358  40										inc eax
 00000359  A3 00000370 R								mov x, eax		;Incrementar X en 1
 0000035E  EB 87							jmp mayorAbsoluto		;Volver al "metodo"


 00000360						acabo:

							;Ahora para el final imprime el mayor numero de la matriz
							
 00000360  E8 00000000 E				call Clrscr
 00000365  BA 0000034E R				mov edx, OFFSET NumeroMayor
 0000036A  E8 00000000 E				call writeString 
 0000036F  E8 00000000 E				call crlf
 00000374  8B 35 00000B83 R				mov esi, indiceMayor
 0000037A  9B DB E3					finit
 0000037D  DB AE 000003AB R				fld matriz[esi]
 00000383  E8 00000000 E				call writeFloat
 00000388  E8 00000000 E				call crlf
 0000038D  9B DB E3					finit


							;---------------------------------------------------------------------------------------------------------------------------


							;Calculando la matrix ortogonal a partir de la normal

 00000B99						.data
 00000B99						numeroReal3		REAL10	2.0
	   40008000000000000000
 00000BA3						numeroReal4		REAL10	1.0
	   3FFF8000000000000000
 00000BAD						numeroReal5		REAL10	-1.0
	   BFFF8000000000000000
 00000BB7						yValue			REAL10	?
	   00000000000000000000
 00000BC1						xValue			REAL10	?
	   00000000000000000000
 00000BCB						zvalue			REAL10	?
	   00000000000000000000
 00000BD5						cValue			REAL10	?
	   00000000000000000000
 00000BDF						sValue			REAL10	?
	   00000000000000000000
 00000BE9						testValue		REAL10	?	
	   00000000000000000000
 00000BF3						testValue2		REAL10	?
	   00000000000000000000
 00000BFD 00000000					position		DWORD ?
 00000C01 00000000					x1				DWORD ?
 00000C05 00000000					y1				DWORD ?
 00000C09 00000000					xpp				DWORD ?
 00000C0D 00000000					ypp				DWORD ?
 00000C11  0000000A [					matrizOrtogonal REAL10 10 DUP(10 DUP(0.0))
	    0000000A [
	     00000000000000000000
	    ]
	   ]
 00000FF9 00000000					realNumber1 DWORD ?
 00000390						.code
							
 00000390  A1 00000C09 R				mov eax, xpp
 00000395  A3 00000C01 R				mov x1, eax
 0000039A  A1 00000C0D R				mov eax, ypp								;Las coordenadas xpp, ypp del elemento con mayor valor absoluto de la matriz (sin contar la diagonal)
 0000039F  A3 00000C05 R				mov y1, eax

 000003A4  A1 00000C01 R				mov eax, x1
 000003A9  A3 00000BFD R				mov position, eax							;Indexo la posicion xpp, xpp en la matriz
 000003AE  FF 0D 00000BFD R				dec position
 000003B4  A1 00000BFD R				mov eax, position
 000003B9  BB 00000064					mov ebx, 100
 000003BE  F7 E3					mul ebx
 000003C0  A3 00000BFD R				mov position, eax
 000003C5  A1 00000C01 R				mov eax, x1
 000003CA  48						dec eax
 000003CB  BB 0000000A					mov ebx, 10
 000003D0  F7 E3					mul ebx
 000003D2  01 05 00000BFD R				add position, eax

 000003D8  9B DB E3					finit
 000003DB  8B 35 00000BFD R				mov esi, position
 000003E1  DB AE 000003AB R				fld matriz[esi]								;Guandando el valor
 000003E7  DB 3D 00000BB7 R				fstp yValue	

 000003ED  A1 00000C05 R				mov eax, y1
 000003F2  A3 00000BFD R				mov position, eax							;Indexo la posicion ypp, ypp en la matriz
 000003F7  FF 0D 00000BFD R				dec position
 000003FD  A1 00000BFD R				mov eax, position
 00000402  BB 00000064					mov ebx, 100
 00000407  F7 E3					mul ebx
 00000409  A1 00000C05 R				mov eax, y1
 0000040E  48						dec eax
 0000040F  BB 0000000A					mov ebx, 10
 00000414  F7 E3					mul ebx
 00000416  01 05 00000BFD R				add position, eax

 0000041C  9B DB E3					finit
 0000041F  8B 35 00000BFD R				mov esi, position
 00000425  DB AE 000003AB R				fld matriz[esi]								;Guardo el valor y lo resto con xpp, xpp para obtener Y
 0000042B  DB 3D 00000BE9 R				fstp testValue
 00000431  9B DB E3					finit
 00000434  DB 2D 00000BB7 R				fld yValue
 0000043A  DB 2D 00000BE9 R				fld testValue
 00000440  D8 C1					fadd st(0), st(1)
 00000442  DB 3D 00000BB7 R				fstp yValue

 00000448  A1 00000C01 R				mov eax, x1
 0000044D  A3 00000BFD R				mov position, eax							;Indexo la posicion xpp, ypp en la matriz
 00000452  FF 0D 00000BFD R				dec position
 00000458  A1 00000BFD R				mov eax, position
 0000045D  BB 00000064					mov ebx, 100
 00000462  F7 E3					mul ebx
 00000464  A1 00000C05 R				mov eax, y1
 00000469  48						dec eax
 0000046A  BB 0000000A					mov ebx, 10
 0000046F  F7 E3					mul ebx
 00000471  01 05 00000BFD R				add position, eax						

 00000477  9B DB E3					finit										;Guardo el valor y lo multiplico por 2 para obtener X
 0000047A  8B 35 00000BFD R				mov esi, position
 00000480  DB AE 000003AB R				fld matriz[esi]						
 00000486  DB 2D 00000B99 R				fld numeroReal3
 0000048C  D8 C9					fmul st(0), st(1)
 0000048E  DB 3D 00000BC1 R				fstp xValue

 00000494  9B DB E3					finit										;Calcula la raiz cuadrada de (x*x+y*y) y la guarda en Z
 00000497  DB 2D 00000BC1 R				fld xValue
 0000049D  DB 3D 00000BCB R				fstp zValue	
 000004A3  9B DB E3					finit
 000004A6  DB 2D 00000BCB R				fld zValue
 000004AC  DB 2D 00000BC1 R				fld xValue								
 000004B2  D8 C9					fmul st(0), st(1)
 000004B4  DB 3D 00000BCB R				fstp zValue
 000004BA  9B DB E3					finit
 000004BD  DB 2D 00000BB7 R				fld yValue
 000004C3  DB 3D 00000BE9 R				fstp testValue
 000004C9  9B DB E3					finit
 000004CC  DB 2D 00000BB7 R				fld yValue
 000004D2  DB 2D 00000BE9 R				fld testValue
 000004D8  D8 C9					fmul st(0), st(1)
 000004DA  DB 3D 00000BE9 R				fstp testValue
 000004E0  9B DB E3					finit
 000004E3  DB 2D 00000BCB R				fld zValue
 000004E9  DB 2D 00000BE9 R				fld testValue
 000004EF  D8 C1					fadd st(0), st(1)
 000004F1  DB 3D 00000BCB R				fstp zValue
 000004F7  9B DB E3					finit
 000004FA  DB 2D 00000BCB R				fld zValue
 00000500  D9 FA					fsqrt
 00000502  DB 3D 00000BCB R				fstp zValue

 00000508  9B DB E3					finit										;Calcula la raiz cuadrada de ((z+y)/(2*z)) y la guarda en C
 0000050B  DB 2D 00000BCB R				fld zValue
 00000511  DB 2D 00000B99 R				fld numeroReal3
 00000517  D8 C9					fmul st(0), st(1)
 00000519  DB 3D 00000BD5 R				fstp cValue
 0000051F  9B DB E3					finit
 00000522  DB 2D 00000BCB R				fld zValue
 00000528  DB 2D 00000BB7 R				fld yValue
 0000052E  D8 C1					fadd st(0), st(1)
 00000530  DB 3D 00000BE9 R				fstp testValue
 00000536  9B DB E3					finit
 00000539  DB 2D 00000BE9 R				fld testValue
 0000053F  DB 2D 00000BD5 R				fld cValue
 00000545  D8 F1					fdiv st(0), st(1)
 00000547  DB 3D 00000BD5 R				fstp cValue
 0000054D  9B DB E3					finit
 00000550  DB 2D 00000BD5 R				fld cValue
 00000556  D9 FA					fsqrt
 00000558  DB 3D 00000BD5 R				fstp cValue

 0000055E  9B DB E3					finit										;Calcula la raiz cuadrada de ((z-y)/(2*z)) y la guarda en S
 00000561  DB 2D 00000B99 R				fld numeroReal3
 00000567  DB 2D 00000BCB R				fld zValue
 0000056D  D8 C9					fmul st(0), st(1)
 0000056F  DB 3D 00000BDF R				fstp sValue
 00000575  9B DB E3					finit
 00000578  DB 2D 00000BCB R				fld zValue
 0000057E  DB 2D 00000BB7 R				fld yValue
 00000584  D8 E1					fsub st(0), st(1)
 00000586  DB 3D 00000BE9 R				fstp testValue
 0000058C  9B DB E3					finit 
 0000058F  DB 2D 00000BE9 R				fld testValue
 00000595  DB 2D 00000BDF R				fld sValue
 0000059B  D8 F1					fdiv st(0), st(1)
 0000059D  DB 3D 00000BDF R				fstp sValue
 000005A3  9B DB E3					finit
 000005A6  DB 2D 00000BDF R				fld sValue
 000005AC  D9 FA					fsqrt
 000005AE  DB 3D 00000BDF R				fstp sValue
 000005B4  9B DB E3					finit										;La var Y se multiplica por el signo de (X/Y)
 000005B7  DB 2D 00000BC1 R				fld xValue
 000005BD  DB 2D 00000BB7 R				fld yValue
 000005C3  D8 F1					fdiv st(0), st(1)
 000005C5  DB 3D 00000BE9 R				fstp testValue
 000005CB  9B DB E3					finit
 000005CE  DB 2D 00000BE9 R				fld testValue
 000005D4  D9 05 00000FF9 R				fld realNumber1
 000005DA  D8 D9					fcomp
 000005DC  7E 17					jle my_comparison3
 000005DE  9B DB E3						finit
 000005E1  DB 2D 00000BDF R					fld sValue
 000005E7  DB 2D 00000BAD R					fld numeroReal5
 000005ED  D8 C9						fmul st(0), st(1)
 000005EF  DB 3D 00000BDF R					fstp sValue
 000005F5						my_comparison3:
							
 000005F5  A1 00000C01 R				mov eax, x1									;Agrego a la matriz ortogonal en la posicion X,X el valor de C
 000005FA  A3 00000BFD R				mov position, eax							
 000005FF  FF 0D 00000BFD R				dec position
 00000605  A1 00000BFD R				mov eax, position
 0000060A  BB 00000064					mov ebx, 100
 0000060F  F7 E3					mul ebx
 00000611  A3 00000BFD R				mov position, eax
 00000616  A1 00000C01 R				mov eax, x1
 0000061B  48						dec eax
 0000061C  BB 0000000A					mov ebx, 10
 00000621  F7 E3					mul ebx
 00000623  01 05 00000BFD R				add position, eax
 00000629  9B DB E3					finit
 0000062C  DB 2D 00000BD5 R				fld cValue
 00000632  8B 35 00000BFD R				mov esi, position
 00000638  DB BE 00000C11 R				fstp matrizOrtogonal[esi]

 0000063E  A1 00000C05 R				mov eax, y1									;Agrego a la matriz ortogonal en la posicion Y,Y el valor de C
 00000643  A3 00000BFD R				mov position, eax							
 00000648  FF 0D 00000BFD R				dec position
 0000064E  A1 00000BFD R				mov eax, position
 00000653  BB 00000064					mov ebx, 100
 00000658  F7 E3					mul ebx
 0000065A  A3 00000BFD R				mov position, eax
 0000065F  A1 00000C05 R				mov eax, y1
 00000664  48						dec eax
 00000665  BB 0000000A					mov ebx, 10
 0000066A  F7 E3					mul ebx
 0000066C  01 05 00000BFD R				add position, eax
 00000672  9B DB E3					finit
 00000675  DB 2D 00000BD5 R				fld cValue
 0000067B  8B 35 00000BFD R				mov esi, position
 00000681  DB BE 00000C11 R				fstp matrizOrtogonal[esi]

 00000687  A1 00000C01 R				mov eax, x1									;Agrego a la matriz ortogonal en la posicion X,Y el valor de S
 0000068C  A3 00000BFD R				mov position, eax							
 00000691  FF 0D 00000BFD R				dec position
 00000697  A1 00000BFD R				mov eax, position
 0000069C  BB 00000064					mov ebx, 100
 000006A1  F7 E3					mul ebx
 000006A3  A3 00000BFD R				mov position, eax
 000006A8  A1 00000C05 R				mov eax, y1
 000006AD  48						dec eax
 000006AE  BB 0000000A					mov ebx, 10
 000006B3  F7 E3					mul ebx
 000006B5  01 05 00000BFD R				add position, eax
 000006BB  9B DB E3					finit
 000006BE  DB 2D 00000BDF R				fld sValue
 000006C4  8B 35 00000BFD R				mov esi, position
 000006CA  DB BE 00000C11 R				fstp matrizOrtogonal[esi]

 000006D0  A1 00000C05 R				mov eax, y1									;Agrego a la matriz ortogonal en la posicion Y,X el valor de -S
 000006D5  A3 00000BFD R				mov position, eax							
 000006DA  FF 0D 00000BFD R				dec position
 000006E0  A1 00000BFD R				mov eax, position
 000006E5  BB 00000064					mov ebx, 100
 000006EA  F7 E3					mul ebx
 000006EC  A3 00000BFD R				mov position, eax
 000006F1  A1 00000C01 R				mov eax, x1
 000006F6  48						dec eax
 000006F7  BB 0000000A					mov ebx, 10
 000006FC  F7 E3					mul ebx
 000006FE  01 05 00000BFD R				add position, eax
 00000704  9B DB E3					finit
 00000707  DB 2D 00000BDF R				fld sValue
 0000070D  DB 2D 00000BAD R				fld numeroReal5
 00000713  D8 C9					fmul st(0), st(1)
 00000715  DB 3D 00000BE9 R				fstp testValue
 0000071B  9B DB E3					finit
 0000071E  DB 2D 00000BE9 R				fld testValue
 00000724  8B 35 00000BFD R				mov esi, position
 0000072A  DB BE 00000C11 R				fstp matrizOrtogonal[esi]
							
						;----------------------------------------------------------------------------------

						 ;multiplcacion
 00000FFD					   .data
 00000FFD 00000000				   i		DWORD ?
 00001001 00000000				   j		DWORD ?
 00001005 00000000				   k		DWORD ?
 00001009 00000000				   xtemp	DWORD ?
 0000100D 00000000				   aux1		DWORD ?
 00001011 00000000				   aux2		DWORD ?
 00001015  0000000A [				   matrizNueva		 REAL10 10 DUP(10 DUP(0.0))			;Crea la maxima matriz, 10 X 10
	    0000000A [
	     00000000000000000000
	    ]
	   ]
 000013FD					   numeroNuevaMatriz REAL10 ?
	   00000000000000000000
 00001407					   numeroSegundaMatriz REAL10 ?
	   00000000000000000000
 00001411					   numeroPrimeraMatriz REAL10 ?
	   00000000000000000000
 0000141B 00000000				   numeroPrimerMatriz DWORD ?
 0000141F					   resultado REAL10 ?
	   00000000000000000000
 00000730					   .code
				   
				 
				   
 00000730					   multiplicacion:
 00000730  BE 00000000						mov esi,0
 00000735  B8 00000000						mov eax,0
 0000073A  A3 00000FFD R					mov i,eax
 0000073F  B9 0000000A						mov ecx,10
								;L1:
 00000744  A3 00000FFD R						mov i,eax
 00000749  89 0D 0000100D R						mov aux1,ecx
 0000074F  B8 00000000							mov eax,0
 00000754  A3 00001001 R						mov j,eax
 00000759  B9 0000000A							mov ecx ,10
									;L2:
 0000075E  89 0D 00001011 R							mov aux2,ecx
 00000764  B8 00000000								mov eax,0
 00000769  A3 00001005 R							mov k,eax
 0000076E  B9 0000000A								mov ecx,10
										;L3:
 00000773  A1 00000FFD R								mov eax,i
 00000778  BB 00000064									mov ebx, 100
 0000077D  F7 E3									mul ebx
 0000077F  A3 00001009 R								mov xtemp,eax
 00000784  A1 00001005 R								mov eax,k
 00000789  BB 0000000A									mov ebx, 10
 0000078E  F7 E3									mul ebx
 00000790  03 05 00001009 R								add	eax, xtemp
 00000796  8B F0									mov esi,eax
									
 00000798  DB BE 000003AB R								fstp matriz[esi]
 0000079E  A3 0000141B R								mov numeroPrimerMatriz, eax
 000007A3  A1 00001005 R								mov eax,k
 000007A8  BB 00000064									mov ebx, 100
 000007AD  F7 E3									mul ebx
 000007AF  A3 00001009 R								mov xtemp,eax
 000007B4  A1 00000FFD R								mov eax,i
 000007B9  BB 0000000A									mov ebx, 10
 000007BE  F7 E3									mul ebx
 000007C0  03 05 00001009 R								add eax, xtemp
 000007C6  8B F0									mov esi,eax
									
 000007C8  DB 2D 00001407 R								fld numeroSegundaMatriz		;Guardar en el stack
 000007CE  DB BE 000003AB R								fstp matriz[esi]			;Sacar del stack
									
 000007D4  9B DB E3									finit
 000007D7  DB 2D 00001407 R								fld numeroSegundaMatriz
 000007DD  DB 2D 00001411 R								fld numeroPrimeraMatriz
 000007E3  DD D9									fstp st(1)
 000007E5  DE C9									fmulp
									
 000007E7  DB 3D 0000141F R								fstp resultado 
 000007ED  A1 00000FFD R								mov eax, i
 000007F2  BB 00000064									mov ebx, 100
 000007F7  F7 E3									mul ebx
 000007F9  A3 00001009 R								mov xtemp, eax
 000007FE  A1 00001001 R								mov eax, j
 00000803  BB 0000000A									mov ebx, 10
 00000808  F7 E3									mul ebx
 0000080A  03 05 00001009 R								add eax, xtemp
 00000810  8B F0									mov esi,eax

 00000812  DB 2D 000013FD R								fld numeroNuevaMatriz		;Guardar en el stack
 00000818  DB BE 00001015 R								fstp matrizNueva[esi]			;Sacar del stack

 0000081E  9B DB E3									finit
 00000821  DB 2D 000013FD R								fld numeroNuevaMatriz
 00000827  DB 2D 0000141F R								fld resultado
 0000082D  D8 C1									fadd st(0),st(1)

 0000082F  DB BE 00001015 R								fstp matrizNueva[esi]

 00000835  A1 00001005 R								mov eax,k
 0000083A  40										inc eax
 0000083B  A3 00001005 R								mov k,eax
										;loop L3
 00000840  A1 00001001 R							mov eax,j
 00000845  40									inc eax
 00000846  A3 00001001 R							mov j,eax
 0000084B  8B 0D 00001011 R							mov ecx,aux2
									;loop L2
 00000851  A1 00000FFD R						mov eax,i
 00000856  40								inc eax
 00000857  A3 00000FFD R						mov i,eax
 0000085C  8B 0D 0000100D R						mov ecx,aux1
								;loop L1

					
				exit
 00000862  6A 00	   *	    push   +000000000h
 00000864  E8 00000000 E   *	    call   ExitProcess
 00000869			main ENDP										;El fin del main




				;---------------------------------------------------------------------------------
				;Procesos varios
				;Este es para imprimir error si el usuario ingresa un tamano mayor a 10 para las filas
				;Recive: nada
				;Retorna: nada
				;Requiere: nada
				;---------------------------------------------------------------------------------
 00000869			tamanoInvalidoFilas PROC

 00000869  E8 00000000 E			call Clrscr
 0000086E  BA 00000196 R			mov edx,offset efilas			;Imprime tamano no valido
 00000873  E8 00000000 E			call writeString
 00000878  E8 00000000 E			call crlf	
 0000087D  BA 00000240 R			mov edx,offset otravez			;Imprime que lo intente de nuevo
 00000882  E8 00000000 E			call writeString
 00000887  E8 00000000 E			call crlf

 0000088C  C3				ret	
 0000088D			tamanoInvalidoFilas ENDP

				;---------------------------------------------------------------------------------
				;Este es para imprimir error si el usuario ingresa un tamano mayor a 10 para las columnas
				;Recive: nada
				;Retorna: nada
				;Requiere: nada
				;---------------------------------------------------------------------------------
 0000088D			tamanoInvalidoColumnas PROC

 0000088D  E8 00000000 E			call Clrscr
 00000892  BA 000001CC R			mov edx,offset ecolumnas			;Imprime tamano no valido
 00000897  E8 00000000 E			call writeString
 0000089C  E8 00000000 E			call crlf	
 000008A1  BA 00000240 R			mov edx,offset otravez			;Imprime que lo intente de nuevo
 000008A6  E8 00000000 E			call writeString
 000008AB  E8 00000000 E			call crlf

 000008B0  C3				ret									
 000008B1			tamanoInvalidoColumnas ENDP							


				;---------------------------------------------------------------------------------
				;Este es para imprimir error si el usuario ingresa las filas diferentes a las columnas
				;Recive: nada
				;Retorna: nada
				;Requiere: nada
				;---------------------------------------------------------------------------------
 000008B1			matrizNoCuadrada PROC

 000008B1  E8 00000000 E			call Clrscr
 000008B6  BA 00000205 R			mov edx,offset eMatrizNoCuadrada
 000008BB  E8 00000000 E			call writeString
 000008C0  E8 00000000 E			call crlf	
 000008C5  BA 00000240 R			mov edx,offset otravez			;Imprime que lo intente de nuevo
 000008CA  E8 00000000 E			call writeString
 000008CF  E8 00000000 E			call crlf
						;jmp numeroFilas
					
 000008D4  C3				ret									
 000008D5			matrizNoCuadrada ENDP										


				;---------------------------------------------------------------------------------
				;Este es para imprimir error si el usuario ingresa un numero menor a 2 en las filas
				;Recive: nada
				;Retorna: nada
				;Requiere: nada
				;---------------------------------------------------------------------------------
 000008D5			numeroInvalidoFilas PROC

 000008D5  E8 00000000 E			call Clrscr
 000008DA  BA 00000251 R			mov edx,offset eNumeroInvalido			;Imprime tamano no valido
 000008DF  E8 00000000 E			call writeString
 000008E4  E8 00000000 E			call crlf
 000008E9  BA 00000240 R			mov edx,offset otravez			;Imprime que lo intente de nuevo
 000008EE  E8 00000000 E			call writeString
 000008F3  E8 00000000 E			call crlf

 000008F8  C3				ret
 000008F9			numeroInvalidoFilas ENDP				


				;---------------------------------------------------------------------------------
				;Este es para imprimir error si el usuario ingresa un numero menor a 2 en las columnas
				;Recive: nada
				;Retorna: nada
				;Requiere: nada
				;---------------------------------------------------------------------------------
 000008F9			numeroInvalidoColumnas PROC

 000008F9  E8 00000000 E			call Clrscr
 000008FE  BA 00000251 R			mov edx,offset eNumeroInvalido			;Imprime tamano no valido
 00000903  E8 00000000 E			call writeString
 00000908  E8 00000000 E			call crlf
 0000090D  BA 00000240 R			mov edx,offset otravez			;Imprime que lo intente de nuevo
 00000912  E8 00000000 E			call writeString
 00000917  E8 00000000 E			call crlf

 0000091C  C3				ret																		
 0000091D			numeroInvalidoColumnas ENDP		


				;---------------------------------------------------------------------------------
				;Esta es para poner todos los objetos de la matriz de 1 al maximo e imprimirlos
				;Recive: eax = numerosTotales
				;Retorna: nada, solo imprime
				;Requiere: nada
				;---------------------------------------------------------------------------------






				;---------------------------------------------------------------------------------
				;Esta es la plantilla que usamos para los proc
				;Recive: 
				;Retorna: 
				;Requiere: nada
				;---------------------------------------------------------------------------------
				;talcosa PROC													;Con esto bautiza el proceso


					
				;	ret														;No olvidar esto o el programa se bloquea
				;talcosa ENDP												;Vital cerrar el programa
				;----------------------------------------------------------------------------------



				END main					;Y el fin del programa
Microsoft (R) Macro Assembler Version 14.00.24210.0	    05/15/17 22:47:32
HolaMundo.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001429 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000091D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000869 Public STDCALL
  numeroMatriz . . . . . . . . .	L Near	 00000041 _TEXT	
  numeroFilas  . . . . . . . . .	L Near	 0000004B _TEXT	
  numeroColumnas . . . . . . . .	L Near	 00000086 _TEXT	
  cuadrada . . . . . . . . . . .	L Near	 000000C1 _TEXT	
  IngresandoDatos  . . . . . . .	L Near	 000001F1 _TEXT	
  reinicioX2 . . . . . . . . . .	L Near	 000002A4 _TEXT	
  aumentoESI2  . . . . . . . . .	L Near	 000002B9 _TEXT	
  finPrograma  . . . . . . . . .	L Near	 000002D3 _TEXT	
  mayorAbsoluto  . . . . . . . .	L Near	 000002E7 _TEXT	
  remplazar  . . . . . . . . . .	L Near	 0000030E _TEXT	
  SonIguales . . . . . . . . . .	L Near	 00000329 _TEXT	
  seguir . . . . . . . . . . . .	L Near	 00000329 _TEXT	
  reiniciarY . . . . . . . . . .	L Near	 00000349 _TEXT	
  acabo  . . . . . . . . . . . .	L Near	 00000360 _TEXT	
  my_comparison3 . . . . . . . .	L Near	 000005F5 _TEXT	
  multiplicacion . . . . . . . .	L Near	 00000730 _TEXT	
matrizNoCuadrada . . . . . . . .	P Near	 000008B1 _TEXT	Length= 00000024 Public STDCALL
numeroInvalidoColumnas . . . . .	P Near	 000008F9 _TEXT	Length= 00000024 Public STDCALL
numeroInvalidoFilas  . . . . . .	P Near	 000008D5 _TEXT	Length= 00000024 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
tamanoInvalidoColumnas . . . . .	P Near	 0000088D _TEXT	Length= 00000024 Public STDCALL
tamanoInvalidoFilas  . . . . . .	P Near	 00000869 _TEXT	Length= 00000024 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
AgregarEn  . . . . . . . . . . .	DWord	 0000039E _DATA	
AuxReal  . . . . . . . . . . . .	TByte	 00000394 _DATA	
AuxX . . . . . . . . . . . . . .	Byte	 000003A3 _DATA	
AuxY . . . . . . . . . . . . . .	Byte	 000003A2 _DATA	
BoolComp . . . . . . . . . . . .	Byte	 000003AA _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CC . . . . . . . . . . . . . . .	Byte	 00000103 _DATA	
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
ContCiclos . . . . . . . . . . .	DWord	 000003A4 _DATA	
ContX  . . . . . . . . . . . . .	Byte	 000003A8 _DATA	
ContY  . . . . . . . . . . . . .	Byte	 000003A9 _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
EsSimetrica  . . . . . . . . . .	Byte	 000002AA _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NoEsSimetrica  . . . . . . . . .	Byte	 000002CB _DATA	
NumeroMayor  . . . . . . . . . .	Byte	 0000034E _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
asignatura . . . . . . . . . . .	Byte	 00000065 _DATA	
aux1 . . . . . . . . . . . . . .	DWord	 0000100D _DATA	
aux2 . . . . . . . . . . . . . .	DWord	 00001011 _DATA	
aux  . . . . . . . . . . . . . .	DWord	 00000388 _DATA	
bienvenida . . . . . . . . . . .	Byte	 00000000 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cValue . . . . . . . . . . . . .	TByte	 00000BD5 _DATA	
capturado  . . . . . . . . . . .	Byte	 00000270 _DATA	
columnas . . . . . . . . . . . .	Byte	 00000379 _DATA	
coma . . . . . . . . . . . . . .	Byte	 00000286 _DATA	
comparar . . . . . . . . . . . .	TByte	 00000B87 _DATA	
coordena . . . . . . . . . . . .	Byte	 0000036F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
eMatrizNoCuadrada  . . . . . . .	Byte	 00000205 _DATA	
eNumeroInvalido  . . . . . . . .	Byte	 00000251 _DATA	
ecolumnas  . . . . . . . . . . .	Byte	 000001CC _DATA	
efilas . . . . . . . . . . . . .	Byte	 00000196 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
filas  . . . . . . . . . . . . .	Byte	 00000378 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
identificacion . . . . . . . . .	Byte	 000000CD _DATA	
index  . . . . . . . . . . . . .	DWord	 0000037A _DATA	
indiceMayor  . . . . . . . . . .	DWord	 00000B83 _DATA	
i  . . . . . . . . . . . . . . .	DWord	 00000FFD _DATA	
j  . . . . . . . . . . . . . . .	DWord	 00001001 _DATA	
k  . . . . . . . . . . . . . . .	DWord	 00001005 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
matrizNueva  . . . . . . . . . .	TByte	 00001015 _DATA	
matrizOrtogonal  . . . . . . . .	TByte	 00000C11 _DATA	
matriz . . . . . . . . . . . . .	TByte	 000003AB _DATA	
mayorX . . . . . . . . . . . . .	DWord	 00000B7B _DATA	
mayorY . . . . . . . . . . . . .	DWord	 00000B7F _DATA	
ncolumnas  . . . . . . . . . . .	Byte	 00000178 _DATA	
nfilas . . . . . . . . . . . . .	Byte	 0000015D _DATA	
numComp  . . . . . . . . . . . .	DWord	 00000B95 _DATA	
numMatriz  . . . . . . . . . . .	DWord	 00000B91 _DATA	
numeroFila . . . . . . . . . . .	DWord	 0000038C _DATA	
numeroNuevaMatriz  . . . . . . .	TByte	 000013FD _DATA	
numeroPrimerMatriz . . . . . . .	DWord	 0000141B _DATA	
numeroPrimeraMatriz  . . . . . .	TByte	 00001411 _DATA	
numeroReal3  . . . . . . . . . .	TByte	 00000B99 _DATA	
numeroReal4  . . . . . . . . . .	TByte	 00000BA3 _DATA	
numeroReal5  . . . . . . . . . .	TByte	 00000BAD _DATA	
numeroSegundaMatriz  . . . . . .	TByte	 00001407 _DATA	
numerosTotales . . . . . . . . .	DWord	 00000390 _DATA	
numero . . . . . . . . . . . . .	TByte	 0000037E _DATA	
otravez  . . . . . . . . . . . .	Byte	 00000240 _DATA	
popd . . . . . . . . . . . . . .	Byte	 0000027A _DATA	
posicionMat  . . . . . . . . . .	Byte	 00000309 _DATA	
posicionTrans  . . . . . . . . .	Byte	 00000329 _DATA	
posicion . . . . . . . . . . . .	Byte	 00000288 _DATA	
position . . . . . . . . . . . .	DWord	 00000BFD _DATA	
query  . . . . . . . . . . . . .	Byte	 0000013E _DATA	
realNumber1  . . . . . . . . . .	DWord	 00000FF9 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
resultado  . . . . . . . . . . .	TByte	 0000141F _DATA	
sValue . . . . . . . . . . . . .	TByte	 00000BDF _DATA	
testValue2 . . . . . . . . . . .	TByte	 00000BF3 _DATA	
testValue  . . . . . . . . . . .	TByte	 00000BE9 _DATA	
transpuesta  . . . . . . . . . .	TByte	 00000793 _DATA	
transpuesto  . . . . . . . . . .	Byte	 000002EF _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
x1 . . . . . . . . . . . . . . .	DWord	 00000C01 _DATA	
xValue . . . . . . . . . . . . .	TByte	 00000BC1 _DATA	
xpp  . . . . . . . . . . . . . .	DWord	 00000C09 _DATA	
xtemp  . . . . . . . . . . . . .	DWord	 00001009 _DATA	
x  . . . . . . . . . . . . . . .	DWord	 00000370 _DATA	
y1 . . . . . . . . . . . . . . .	DWord	 00000C05 _DATA	
yValue . . . . . . . . . . . . .	TByte	 00000BB7 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
ypp  . . . . . . . . . . . . . .	DWord	 00000C0D _DATA	
y  . . . . . . . . . . . . . . .	DWord	 00000374 _DATA	
zvalue . . . . . . . . . . . . .	TByte	 00000BCB _DATA	

	   1 Warnings
	   0 Errors
